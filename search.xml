<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>react</title>
    <url>/2020/08/08/react/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>test</title>
    <url>/2020/08/07/test/</url>
    <content><![CDATA[<h2 id="新建文件"><a href="#新建文件" class="headerlink" title="新建文件"></a>新建文件</h2><pre><code>xiaoming
afadfaadf</code></pre><p>adfadfadf<br>| awng    asdf | adfaaadf |<br>|–|–|<br>| dfa | afd |<br><a href="www.baidu.com">baidu</a></p>
<ul>
<li>13fad<del><strong>afdfadf</strong>## fdasf</del><img src="test_md_files/wallhaven-1jm8dg.png?v=1&type=image" alt="输入图片描述"><h2 id="xasdf"><a href="#xasdf" class="headerlink" title="xasdf"></a>xasdf</h2><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a><strong>标题</strong></h2></li>
</ul>
<p><em>HyperText Markup</em><br>dafasdfdasadfffffffffffff</p>
]]></content>
  </entry>
  <entry>
    <title>readme</title>
    <url>/2020/07/04/readme/</url>
    <content><![CDATA[<h2 id="buffer-的那些事"><a href="#buffer-的那些事" class="headerlink" title="buffer 的那些事"></a>buffer 的那些事</h2><h3 id="为什么-buffer-会产生？"><a href="#为什么-buffer-会产生？" class="headerlink" title="为什么 buffer 会产生？"></a>为什么 buffer 会产生？</h3><p>  由于应用场景不同，再 Node 中，应用需要处理网络协议，操作数据库，处理图片，接受上传文件等，再网络流和文件的操作中，还要处理大量二进制数据，JavaScript 自有的字符串远远不能满足这些需求，于是 Buffer 对象应运而生。</p>
<h3 id="Buffer-结构"><a href="#Buffer-结构" class="headerlink" title="Buffer 结构"></a>Buffer 结构</h3><p>  类似 Array 对象，主要操作字节。 从两方面认识模块结构和对象层面</p>
<h3 id="模块结构-不理解"><a href="#模块结构-不理解" class="headerlink" title="模块结构(不理解)"></a>模块结构(不理解)</h3><p>  Node 在进程启动时就已经加载，无需使用 require()即可使用</p>
<h3 id="Buffer-对象"><a href="#Buffer-对象" class="headerlink" title="Buffer 对象"></a>Buffer 对象</h3><p>  类似数组,得到 16 进制两位数,即 0-255<br>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"学习node.js"</span>;</span><br><span class="line"><span class="keyword">var</span> buf = <span class="keyword">new</span> Buffer(str, <span class="string">"utf-8"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(buf);</span><br><span class="line"><span class="comment">// =&gt; &lt;Buffer e5 ad a6 e4 b9 a0 6e 6f 64 65 2e 6a 73&gt;</span></span><br></pre></td></tr></table></figure><br>  Buffer 有 length 属性,可通过下标访问元素<br>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> buf = <span class="keyword">new</span> Buffer(<span class="number">100</span>);</span><br><span class="line"><span class="built_in">console</span>.log(buf.length); <span class="comment">// =&gt; 100</span></span><br></pre></td></tr></table></figure><br>  可以通过下标赋值<br>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">buf[<span class="number">10</span>] = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">console</span>.log(buf[<span class="number">10</span>]); <span class="comment">//=&gt;100</span></span><br></pre></td></tr></table></figure><br>  值得注意的是,如果给的值不在 0-255 之间<br>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">buf[<span class="number">20</span>] = <span class="number">-100</span>;</span><br><span class="line"><span class="built_in">console</span>.log(buf[<span class="number">20</span>]); <span class="comment">// 156</span></span><br><span class="line">buf[<span class="number">21</span>] = <span class="number">300</span>;</span><br><span class="line"><span class="built_in">console</span>.log(buf[<span class="number">21</span>]); <span class="comment">// 44</span></span><br><span class="line">buf[<span class="number">22</span>] = <span class="number">3.1415</span>;</span><br><span class="line"><span class="built_in">console</span>.log(buf[<span class="number">22</span>]); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><br>  规则是如果给的值小于 0,给该值逐次加 256,直到在 0-255 之间,同理,如果大于 255,逐次减 256,如果小数,舍弃小数</p>
<h3 id="Buffer-内存分配"><a href="#Buffer-内存分配" class="headerlink" title="Buffer 内存分配"></a>Buffer 内存分配</h3><p>  Node 采用 slab 分配机制(申请一块固定大小的内存区域),它有三种状态</p>
<ul>
<li> full: 完全分配</li>
<li> partial: 部分分配</li>
<li> empty: 未分配<br>需要 buffer 是,可以通过 new Buffer(size)得到指定内存大小<br>Node 以 8KB 分大小内存,Buffer.poolSize = 8 * 1024;<br>一个 slab 值为 8kb,以它作为单元分配内存</li>
</ul>
<ol>
<li>分配小 Buffer 对象<br>若小于 8kb,Buffer 会使用一个局部变量 pool 作为中间处理对象,处于分配状态的 slab 单元都会指向它. 如下,以下新申请的 SlowBuffer 会指向一个全新的 slab 单元<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> pool;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">allocPool</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  pool = <span class="keyword">new</span> SlowBuffer(Buffer.poolSize);</span><br><span class="line">  pool.used = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
如下为全新slab单元<br>|                                 | 8kb 的pool<br>used:0<br>此时 slab 状态为 empty<br>当 new Buffer(1024), 这次构造将检查pool对象,若没有,新建slab单元指向它,if (!pool || pool.length - pool.used &lt; this.length) allocPool(); 同时当前buffer对象的parent 属性指向slab, 并记录是从哪个位置（offset)开始使用，slab自身记录被使用了多少字节<br>存放进去之后slab 状态为partial<br>当再一次创建时判断剩余空间是否充足，够就存，不够，构造新的slab。 原来的slab空间浪费</li>
<li>分配小 Buffer 对象<br>超过8kb buffer对象，直接分配一个SlowBuffer为slab单元</li>
</ol>
<h3 id="Buffer-的转换"><a href="#Buffer-的转换" class="headerlink" title="Buffer 的转换"></a>Buffer 的转换</h3><p>  buffer 对象可以与字符串相互转换，支持 ASCII,UTF-8,UTF-16LE/UCS-2,Base64,Binary,Hex</p>
<ol>
<li>字符串转buffer<br>主要通过构造函数完成<br>new Buffer(str, [encoding]);<br>存储的之内是一种编码类型，一个buffer对象可以存储不同编码类型的字符串转码的值，调用write()<br>buf.write(string,[offset],[length],[encoding])</li>
<li>Buffer 转字符串<br>转换十分简单,如下<br>buf.toString([encoding],[start],[end])</li>
<li>Buffer不支持的编码类型<br>Buffer.isEncoding(encoding)判断是否支持转换</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/05/07/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
